/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.timepath.tf2.loaders.test;

import com.timepath.tf2.loaders.GCF;
import com.timepath.tf2.hudeditor.util.Utils;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author timepath
 */
public class GCFTest extends javax.swing.JFrame {
    
    private static final Logger logger = Logger.getLogger(GCFTest.class.getName());

    /**
     * Creates new form GCFTest
     */
    public GCFTest() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String... args) {
        try {
            File[] f = new File(Utils.locateSteamAppsDirectory()).listFiles(new FilenameFilter() {

                public boolean accept(File parent, String name) {
                    return name.toLowerCase().endsWith(".gcf");
                }
                
            });
            for(int i = 0; i < f.length; i++) {
                logger.log(Level.INFO, "loading {0}", f[i].getName());
                GCF.load(f[i]);//.extract();
                logger.info("\n");
            }
//            GCF.load(new File(Utils.locateSteamAppsDirectory() + "Team Fortress 2 Content.gcf"));//.extract();
        } catch (IOException ex) {
           logger.log(Level.SEVERE, null, ex);
        }
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GCFTest().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
